"""Team Copilot Tests - Unit Tests - Routers - Users - Update User."""

from uuid import uuid4
from datetime import datetime, timezone
from unittest.mock import patch, call

from dateutil.parser import parse

from fastapi import FastAPI, status
from fastapi.testclient import TestClient

from team_copilot.core.auth import get_admin_user
from team_copilot.models.data import User

from tests.unit.routers import raise_not_authorized_exc


def test_update_user(app: FastAPI, test_client: TestClient, admin_user_mock: User):
    """Test the "update_user" endpoint.

    Args:
        app (FastAPI): FastAPI application.
        test_client (TestClient): FastAPI test client.
        admin_user_mock (User): Enabled administrator user mock.
    """
    app.dependency_overrides[get_admin_user] = lambda: admin_user_mock

    user_id = uuid4()
    now = datetime.now(timezone.utc)

    # Simulate an existing user
    user = User(
        id=user_id,
        username="user",
        password="useruser",
        name="User",
        email="user@example.com",
        staff=False,
        admin=False,
        enabled=True,
        created_at=now,
        updated_at=now,
    )

    # Request data
    req_data = {"name": "New User", "email": "newuser@example.com"}

    with (
        patch("team_copilot.routers.users.get_us") as get_user_mock,
        patch("team_copilot.routers.users.save_user") as save_user_mock,
    ):
        # Simulate the returned values of the "get_us" function
        get_user_mock.side_effect = [user, None]

        # Configure the "save_user" mock to simulate the fields of the user that are
        # generated by the database server when updating a user ("updated_at").
        def side_effect(u: User):
            u.updated_at = now

        save_user_mock.side_effect = side_effect

        # Make HTTP request
        response = test_client.put(f"/users/{user_id}", json=req_data)

        # Check response
        assert response.status_code == status.HTTP_200_OK

        res_data = response.json()
        assert len(res_data) == 2
        assert res_data["message"] == f"User {user_id} ({user.username}) updated."

        data = res_data["data"]
        assert len(data) == 9

        assert data["id"] == str(user.id)
        assert data["username"] == user.username
        assert data["name"] == data["name"]
        assert data["email"] == data["email"]
        assert data["staff"] == user.staff
        assert data["admin"] == user.admin
        assert data["enabled"] == user.enabled
        assert parse(data["created_at"]) == user.created_at
        assert parse(data["updated_at"]) == user.updated_at

        # Check function calls
        get_user_mock.assert_has_calls([
            call(id=user_id),
            call(username=None, email=req_data["email"]),
        ])

        save_user_mock.assert_called_once()

    app.dependency_overrides.clear()


def test_update_user_unauthenticated(test_client: TestClient):
    """Test the "update_user" endpoint for an unauthenticated user.
    
    Args:
        test_client (TestClient): FastAPI test client.
    """
    user_id = uuid4()

    # Request data
    data = {"name": "New User", "email": "newuser@example.com"}

    # Make HTTP request
    response = test_client.put(f"/users/{user_id}", json=data)

    assert response.status_code == status.HTTP_401_UNAUTHORIZED
    res_data = response.json()

    assert len(res_data) == 3
    assert res_data["message"] == "Authentication error."
    assert res_data["count"] == 1

    data = res_data["data"]
    assert len(data) == 1
    assert data[0]["id"] == "authentication"
    assert data[0]["message"] == "Not authenticated"


def test_update_user_unauthorized(app: FastAPI, test_client: TestClient):
    """Test the "update_user" endpoint for an unauthorized user.
    
    Args:
        app (FastAPI): FastAPI application.
        test_client (TestClient): FastAPI test client.
    """
    app.dependency_overrides[get_admin_user] = raise_not_authorized_exc
    user_id = uuid4()

    # Request data 
    data = {"name": "New User", "email": "newuser@example.com"}

    # Make HTTP request
    response = test_client.put(f"/users/{user_id}", json=data)

    # Check response
    assert response.status_code == status.HTTP_403_FORBIDDEN

    res_data = response.json()
    assert len(res_data) == 3
    assert res_data["message"] == "Authorization error."
    assert res_data["count"] == 1

    data = res_data["data"]
    assert len(data) == 1
    assert data[0]["id"] == "authorization"
    assert data[0]["message"] == "Not authorized"

    app.dependency_overrides.clear()


def test_update_user_not_found(
    app: FastAPI,
    test_client: TestClient,
    admin_user_mock: User,
):
    """Test the "update_user" endpoint with a non-existing user.

    Args:
        app (FastAPI): FastAPI application.
        test_client (TestClient): FastAPI test client.
        admin_user_mock (User): Enabled administrator user mock.
    """
    app.dependency_overrides[get_admin_user] = lambda: admin_user_mock
    user_id = uuid4()

    # Request data
    data = {"name": "New User", "email": "newuser@example.com"}

    with patch("team_copilot.routers.users.get_us", return_value=None) as get_user_mock:
        # Make HTTP request
        response = test_client.put(f"/users/{user_id}", json=data)

        # Check response
        assert response.status_code == status.HTTP_404_NOT_FOUND

        res_data = response.json()
        assert len(res_data) == 3

        assert res_data["message"] == "Error."
        assert res_data["count"] == 1
        assert res_data["data"][0]["id"] == "error"
        assert res_data["data"][0]["message"] == f"User {user_id} not found."

        # Check function calls
        get_user_mock.assert_called_once_with(id=user_id)

    app.dependency_overrides.clear()


def test_update_user_exists_username(
    app: FastAPI,
    test_client: TestClient,
    admin_user_mock: User,
):
    """Test the "update_user" endpoint when a user with the same username already
    exists.

    Args:
        app (FastAPI): FastAPI application.
        test_client (TestClient): FastAPI test client.
        admin_user_mock (User): Enabled administrator user mock.
    """
    app.dependency_overrides[get_admin_user] = lambda: admin_user_mock

    user_id = uuid4()
    now = datetime.now(timezone.utc)

    # Simulate an existing user to update
    user = User(
        id=user_id,
        username="user1",
        password="user1user1",
        name="User 1",
        email="user1@example.com",
        staff=False,
        admin=False,
        enabled=True,
        created_at=now,
        updated_at=now,
    )

    # Simulate another existing user
    other_user = User(
        id=uuid4(),
        username="user2",
        password="user2user2",
        name="User 2",
        email="user2@example.com",
        staff=False,
        admin=False,
        enabled=True,
        created_at=now,
        updated_at=now,
    )

    # Request data
    req_data = {
        "username": "user2",
        "password": "user3user3",
        "name": "User 3",
        "email": "user3@example.com",
    }

    with patch("team_copilot.routers.users.get_us") as get_user_mock:
        # Simulate the returned values of the "get_us" function
        get_user_mock.side_effect = [user, other_user]

        # Make HTTP request
        response = test_client.put(f"/users/{user_id}", json=req_data)

        # Check response
        assert response.status_code == status.HTTP_409_CONFLICT

        res_data = response.json()
        assert len(res_data) == 3

        assert res_data["message"] == "Error."
        assert res_data["count"] == 1

        data = res_data["data"]

        assert len(data) == 1
        assert data[0]["id"] == "error"

        assert data[0]["message"] == (
            "A user with the same username or e-mail address already exists."
        )

        # Check function calls
        get_user_mock.assert_has_calls([
            call(id=user_id),
            call(username=req_data["username"], email=req_data["email"]),
        ])


def test_update_user_exists_email(
    app: FastAPI,
    test_client: TestClient,
    admin_user_mock: User,
):
    """Test the "update_user" endpoint when a user with the same e-mail address already
    exists.

    Args:
        app (FastAPI): FastAPI application.
        test_client (TestClient): FastAPI test client.
        admin_user_mock (User): Enabled administrator user mock.
    """
    app.dependency_overrides[get_admin_user] = lambda: admin_user_mock

    user_id = uuid4()
    now = datetime.now(timezone.utc)

    # Simulate an existing user to update
    user = User(
        id=user_id,
        username="user1",
        password="user1user1",
        name="User 1",
        email="user1@example.com",
        staff=False,
        admin=False,
        enabled=True,
        created_at=now,
        updated_at=now,
    )

    # Simulate another existing user
    other_user = User(
        id=uuid4(),
        username="user2",
        password="user2user2",
        name="User 2",
        email="user2@example.com",
        staff=False,
        admin=False,
        enabled=True,
        created_at=now,
        updated_at=now,
    )

    # Request data
    req_data = {
        "username": "user3",
        "password": "user3user3",
        "name": "User 3",
        "email": "user2@example.com",
    }

    with patch("team_copilot.routers.users.get_us") as get_user_mock:
        # Simulate the returned values of the "get_us" function
        get_user_mock.side_effect = [user, other_user]

        # Make HTTP request
        response = test_client.put(f"/users/{user_id}", json=req_data)

        # Check response
        assert response.status_code == status.HTTP_409_CONFLICT

        res_data = response.json()
        assert len(res_data) == 3

        assert res_data["message"] == "Error."
        assert res_data["count"] == 1

        data = res_data["data"]

        assert len(data) == 1
        assert data[0]["id"] == "error"

        assert data[0]["message"] == (
            "A user with the same username or e-mail address already exists."
        )

        # Check function calls
        get_user_mock.assert_has_calls([
            call(id=user_id),
            call(username=req_data["username"], email=req_data["email"]),
        ])

"""Team Copilot - Core - Security."""

from datetime import datetime, timedelta, timezone

from fastapi.security import OAuth2PasswordBearer
from sqlmodel import select
import jwt

from passlib.context import CryptContext

from team_copilot.db.session import open_session
from team_copilot.models.data import User
from team_copilot.core.config import settings


# Authentication
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(password: str, password_hash: str) -> bool:
    """Verify a password by comparing it to its hash.

    Args:
        password (str): Password.
        password_hash (str): Password hash.

    Returns:
        bool: Whether the password is correct.
    """
    return pwd_context.verify(password, password_hash)


def get_password_hash(password: str) -> str:
    """Get the hash of a password.

    Args:
        password (str): Password.

    Returns:
        str: Password hash.
    """
    return pwd_context.hash(password)


def get_user(username: str) -> User | None:
    """Get a user (including its password hash) by its username.

    Args:
        username (str): Username.

    Returns:
        DbUser | None: User if found, None otherwise.
    """
    with open_session(settings.db_url) as session:
        # Create the statement
        s = select(User).where(User.username == username)

        # Execute the statement and return the first element
        return session.exec(s).first()


def create_user(
    username: str,
    password: str,
    name: str | None = None,
    email: str | None = None,
    staff: bool = False,
    admin: bool = False,
    enabled: bool = False,
) -> User:
    """Create a user.

    Args:
        username (str): Username.
        password (str): Password.
        name (str | None): Name (default: `None`).
        email (str | None): Email (default: `None`).
        staff (bool): Staff.
        admin (bool): Admin.
        enabled (bool): Enabled.

    Returns:
        User: User object.
    """
    with open_session(settings.db_url) as session:
        user = User(
            username=username,
            password_hash=get_password_hash(password),
            name=name,
            email=email,
            staff=staff,
            admin=admin,
            enabled=enabled,
        )

        session.add(user)
        session.commit()

        # Refresh the user object to get the updated ID and timestamps, which are
        # generated by the database.
        session.refresh(user)

        return user


def authenticate_user(username: str, password: str) -> User | None:
    """Authenticate a user by its username and password.

    Args:
        username (str): Username.
        password (str): Password.

    Returns:
        User | None: User if authentication is successful or None otherwise.
    """
    user = get_user(username)

    # Check if the user exists, is enabled, and the password is correct.
    if (
        not user
        or not user.enabled
        or not verify_password(password, user.password_hash)
    ):
        return None

    return user


def create_access_token(data: dict, exp_delta: timedelta | None = None) -> str:
    """Create an access token.

    Args:
        data (dict): Data.
        exp_delta (timedelta | None): Expiration delta.

    Returns:
        str: Access token.
    """
    data = data.copy()

    if exp_delta:
        exp = datetime.now(timezone.utc) + exp_delta
    else:
        exp = datetime.now(timezone.utc) + timedelta(
            minutes=settings.app_acc_token_exp_min
        )

    data.update({"exp": exp})

    # Return the encoded token
    return jwt.encode(
        data, settings.app_secret_key, algorithm=settings.app_hash_algorithm
    )
